/*
 Para abrir sesión de postgresql
 sudo -u postgres psql

 Eliminamos la bd dbagebsyucatan

 DROP DATABASE dbagebsyucatan;

 Creamos nuevamente la bd dbagebsyucatan

 CREATE DATABASE dbagebsyucatan;

 Incorporamos la extensión PostGIS

 CREATE EXTENSION  postgis;

 Generate the SQL dump file for the shapefile using the shp2pgsql command.
 You are going to use the -G option to generate a PostGIS spatial table using
 the geography type, and the -I option to generate the spatial index on the
 geometric column:

 shp2pgsql -G -I 31a.shp tb_dbagebsyucatan > dbagebsyucatan.sql

 Para que nos genere geometry en vez de geography, y para que la columna de geometría
 se llame the_geom

 shp2pgsql -I -g the_geom  31a.shp tb_dbagebsyucatan > dbagebsyucatan.sql

 Para agregar el sistema de referencia. Este es el que usamos al final
 shp2pgsql -I -s 4326  31a.shp tb_dbagebsyucatan > dbagebsyucatan.sql

 fuente: https://manpages.debian.org/stretch/postgis/shp2pgsql.1.en.html

  Para ejecutar el script
 psql -U postgres -d dbagebsyucatan -a -f dbagebsyucatan.sql

 Check if the metadata record is visible in the geography_columns view (and not in
 the geometry_columns view as with the -G option of the shp2pgsql command,
 we have opted for a geography type):

 SELECT f_geography_column,coord_dimension,srid, type FROM geography_columns WHERE f_table_name = 'tb_dbagebscdmx';

 Para generar nuestro ORM
 sqlacodegen postgresql://usuario:clave@localhost/dbagebsyucatan --outfile dbagebsyucatan.py

 Ejemplo de consulta con PostGIS
 SELECT nombre_de_la_unidad_economica,codigo_postal FROM denue WHERE ST_Intersects(the_geom, ST_GeomFromText('POLYGON ((-99.05746600000001 19.388907, -99.054934 19.387227, -99.055148 19.389686, -99.05746600000001 19.388907))',4326));

*/
